public static void main(String[] args) {
  String inputPathCustomers;
  String inputPathItems;
  String inputPathPurchases;
  String outputPathPart1;
  String outputPathPart2;
  
  inputPathCustomers = "Customers.txt";
  inputPathItems = "ItemsCatalog.txt";
  inputPathPurchases = "Purchases.txt";
  outputPathPart1 = "outPart1/";
  outputPathPart2 = "outPart2/";
  
  // Create a configuration object and set the name of the application
  SparkConf conf = new SparkConf().setAppName("Spark Exam - Exercise #2");
  
  // Create a Spark Context object
  JavaSparkContext sc = new JavaSparkContext(conf);

  /////////// PART 1 ///////////
  JavaRDD<String> purchasesRDD = sc.textFile(inputPathPurchases).filter( e->{
    String[] fields = e.split(",");
    String year = fields[0].split("/")[0];
    return year.equals("2020") || year.equals("2021");
  }).cache();

  purchasesRDD.mapToPair( e-> {
    String[] fields = e.split(",");
    String year = fields[0].split("/")[0];
    String pid = fields[2];
    int v2020=0;
    int v2021=0;
    year == 2020 ? v2020=1 : v2021=1;
    return new Tuple2<String, Tuple2<Integer,Integer>>(pid, new Tuple2<Integer, Integer>(v2020,v2021));
  }).reduceByKey(
    (a,b) -> {
       int v2020 = a._1()+b._1();
       int v2021 = 1._2()+b._2();
       return new Tuple2<Integer, Integer>(v2020,v2021);
  }).filter( e-> {
    return e._2()._1() >= 10000 && e._2()._2() >= 10000;
  })
  .keys()
  .saveAsTextFile(outputPathPart1);

  ///////// PART 2 /////////
  JavaPairRDD<String, String> itemsCategoryRDD = sc.textFile(inputPathItems)
    .filter(e -> {
       String year = e.split(",")[3].split("/")[0];
       return year.compareTo("2020")<0;
  }).mapToPair( e-> {
       String[] fields = e.split(",");
       return new Tuple2<String, String>(fields[0], fields[2]);
  })
  ;
  
  JavaPairRDD<String, Integer> point2RDD = purchasesRDD.filter(e-> {
     return e.split(",")[0].split("/")[0].equals("2020");
  }).mapToPair(e-> {
     String[] fields = e.split(",");
     String month = fields[0].split("/")[1];
     String pid = fields[2];
     String uid = fields[1];
     return new Tuple2<String, String>(pid+","+month, uid);
  }).groupByKey()
  .filter(e->{
     List<String> uids = new ArrayList<String>();
     for(String uid : e._2()) {
        uids.contains(uid) ? null : uids.add(uid);
     }
     return uids.size()<10;
  }).mapToPair( e-> {
     return new Tuple2<String, Integer>(e._1().split(",")[0], 1);
  }).reduceByKey(
   (a,b) -> {
      return a+b;
  }).filter(e -> e._2()>1)
  ;
  
  point2RDD.join(itemsCategory).mapToPair( e-> {
    return new Tuple2<String, String>(e._1(), e._2()._2());
  })
  .saveAsTextFile(outputPathPart2)
  ;

  sc.close();

  
}