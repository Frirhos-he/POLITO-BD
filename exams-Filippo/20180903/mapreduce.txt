package it.polito.bigdata.hadoop.lab;

import org.apache.hadoop.*;

public class DriverBigData extends Configured implements Tool {
 /*  public static enum COUNTERS {
		SELECTED_WORDS, 
		DISCARDED_WORDS
	}
  */
  @Override
  public int run(String[] args) throws Exception {
    Path inputPath;
    Path outputDir;
    int exitCode;


    inputPath = new Path(args[0]);
    outputDir = new Path(args[1]);

    Configuration conf = this.getConf();
    conf.set("prefix", prefix);
	
    Job job = Job.getInstance(conf);
    job.setJobName("Exam-BD");
    FileInputFormat.addInputPath(job, inputPath);
    FileOutputFormat.setOutputPath(job, outputDir);
    job.setJarByClass(DriverBigData.class);
    job.setInputFormatClass(TextInputFormat.class); //KeyValueTextInputFormat
    job.setOutputFormatClass(TextOutputFormat.class); //KeyValueTextOutputFormat
    job.setMapperClass(MapperBigData1.class);
    job.setMapOutputKeyClass(NullWritable.class);
    job.setMapOutputValueClass(Text.class);
    job.setReducerClass(ReducerBigData1.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    job.setNumReduceTasks(1);

    if (job.waitForCompletion(true) == true) {
        exitCode = 0;
      }
      else
        exitCode = 1;

    return exitCode;
  }

  public static void main(String args[]) throws Exception {
    int res = ToolRunner.run(new Configuration(), new DriverBigData(), args);
    System.exit(res);
  }
}


####################################################################################
##################################   MAPPER   ######################################
####################################################################################


    protected void map(
        LongWritable key,
        Text value,
        Context context) throws IOException, InterruptedException {

       String fields[] = value.split(",");
       String date = fields[1];
       String id = fields[0];
 
       if(id.equals("GOOG") && date.split("/")[0].equals("2017")) {
          context.write(NullWritable.get(), new Text(date + "," + fields[2] + "," + fields[3]);
       }

    }

}

####################################################################################
##################################   REDUCER   #####################################
####################################################################################

class ReducerBigData1 extends Reducer<
                NullWritable,           // Input key type
                Text,    // Input value type
                Text,           // Output key type
                Text> {  // Output value type
    
    @Override
    protected void reduce(
        NullWritable key, // Input key type
        Iterable<Text> values, // Input value type
        Context context) throws IOException, InterruptedException {
	
	int max = Integer.MIN_VALUE;
        String maxHHMM = "";
        String maxDate = "";

	for(Text t : values) {
           String[] fields = t.split(",");
           Integer val = Integer.parseInt(fields[2]);
           if(val >= max) {
              max = val;
              // select the oldest date
              if(maxDate==null || fields[0].compareTo(maxDate)<0)
                  maxDate = fields[0];
              maxHHMM = fields[1];
           }
           
        }

        context.write(new Text (max+"\t"+maxDate), new Text(maxHHMM));
    }

}
